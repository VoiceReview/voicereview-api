/* tslint:disable */
/* eslint-disable */


/**
 * AUTO-GENERATED FILE - DO NOT EDIT!
 *
 * This file was automatically generated by pg-to-ts v.4.1.1
 * $ pg-to-ts generate -c postgres://username:password@localhost:5432/voicereview-user -t refresh_tokens -t sessions -t users -s public
 *
 */


export type Json = unknown;

// Table refresh_tokens
/** Auth: Stores refresh tokens */
export interface RefreshTokens {
  token: string;
  user_id: string | null;
  created_at: Date | null;
  updated_at: Date | null;
  expires_at: Date | null;
  revoked: boolean | null;
}
/** Auth: Stores refresh tokens */
export interface RefreshTokensInput {
  token?: string;
  user_id?: string | null;
  created_at?: Date | null;
  updated_at?: Date | null;
  expires_at?: Date | null;
  revoked?: boolean | null;
}
const refresh_tokens = {
  tableName: 'refresh_tokens',
  columns: ['token', 'user_id', 'created_at', 'updated_at', 'expires_at', 'revoked'],
  requiredForInsert: [],
  primaryKey: 'token',
  foreignKeys: { user_id: { table: 'users', column: 'user_id', $type: null as unknown as Users }, },
  $type: null as unknown as RefreshTokens,
  $input: null as unknown as RefreshTokensInput
} as const;

// Table sessions
/** Auth: Stores session tokens */
export interface Sessions {
  session_id: string;
  user_id: string | null;
  token_hash: string;
  created_at: Date | null;
  updated_at: Date | null;
  expires_at: Date | null;
  revoked: boolean | null;
}
/** Auth: Stores session tokens */
export interface SessionsInput {
  session_id?: string;
  user_id?: string | null;
  token_hash: string;
  created_at?: Date | null;
  updated_at?: Date | null;
  expires_at?: Date | null;
  revoked?: boolean | null;
}
const sessions = {
  tableName: 'sessions',
  columns: ['session_id', 'user_id', 'token_hash', 'created_at', 'updated_at', 'expires_at', 'revoked'],
  requiredForInsert: ['token_hash'],
  primaryKey: 'session_id',
  foreignKeys: { user_id: { table: 'users', column: 'user_id', $type: null as unknown as Users }, },
  $type: null as unknown as Sessions,
  $input: null as unknown as SessionsInput
} as const;

// Table users
/** Auth: Stores user credentials */
export interface Users {
  user_id: string;
  email: string | null;
  phone: string | null;
  password: string;
  verified: boolean | null;
  role: string | null;
  created_at: Date | null;
  updated_at: Date | null;
}
/** Auth: Stores user credentials */
export interface UsersInput {
  user_id?: string;
  email?: string | null;
  phone?: string | null;
  password: string;
  verified?: boolean | null;
  role?: string | null;
  created_at?: Date | null;
  updated_at?: Date | null;
}
const users = {
  tableName: 'users',
  columns: ['user_id', 'email', 'phone', 'password', 'verified', 'role', 'created_at', 'updated_at'],
  requiredForInsert: ['password'],
  primaryKey: 'user_id',
  foreignKeys: {},
  $type: null as unknown as Users,
  $input: null as unknown as UsersInput
} as const;


export interface TableTypes {
  refresh_tokens: {
    select: RefreshTokens;
    input: RefreshTokensInput;
  };
  sessions: {
    select: Sessions;
    input: SessionsInput;
  };
  users: {
    select: Users;
    input: UsersInput;
  };
}

export const tables = {
  refresh_tokens,
  sessions,
  users,
}
